You are given two positive integers n and k.

An integer x is called k-palindromic if:

x is a 
palindrome
.
x is divisible by k.
Return the largest integer having n digits (as a string) that is k-palindromic.

Note that the integer must not have leading zeros.

 

Example 1:

Input: n = 3, k = 5

Output: "595"

Explanation:

595 is the largest k-palindromic integer with 3 digits.

Example 2:

Input: n = 1, k = 4

Output: "8"

Explanation:

4 and 8 are the only k-palindromic integers with 1 digit.

Example 3:

Input: n = 5, k = 6

Output: "89898"

class Solution {
    public String largestPalindrome(int n, int k) {
        // take the largest number of n digits
        long max = (long)Math.pow(10, n) - 1;
        // take the smallest number of n digits
        long min = (long)Math.pow(10, n - 1);
        // iterate from max to min and check if the number is palindrome and divisible by k
        for (long i = max; i >= min; i--) {
            long num = getPalindrome(i);
            if (num <= max && num % k == 0) {
                return String.valueOf(num);
            }
        }
        return "";
    }

    private long getPalindrome(long num) {
        long res = num;
        num /= 10;
        while (num > 0) {
            res = res * 10 + num % 10;
            num /= 10;
        }
        return res;
    }
}